{"version":3,"sources":["logo.svg","CellAutomata/Automations/GameOfLife.js","CellAutomata/Components/Cell/Cell.jsx","CellAutomata/CellAutomata.jsx","App.js","reportWebVitals.js","index.js"],"names":["countNeighbors","grid","x","y","rows","cols","sum","i","j","isAlive","Cell","props","state","this","col","row","onMouseDown","onMouseEnter","onMouseUp","cellState","className","Component","CellAutomata","stepGOL","newGrid","next","_","cloneDeep","neighbors","console","log","gameOfLife","setState","generations","runGameOfLife","clearInterval","intervalId","setInterval","start","a","document","getElementById","value","automation","stop","clear","componentDidMount","seed","seededGrid","mouseIsPressed","started","automations","id","name","createGrid","getNewGrid","automationList","length","map","item","class","onClick","rowInd","cell","cellInd","handlemouseDown","handleMouseEnter","handleMouseUp","currRow","push","createNode","randomNode","Math","random","newCell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.eb377b40.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import _ from \"lodash\"\r\n\r\nexport function gameOfLife(grid, rows, cols){\r\n    let next = _.cloneDeep(grid);\r\n    \r\n    for (let i = 0; i < rows; i++){\r\n        for (let j = 0; j < cols; j++){\r\n            \r\n            const state = grid[i][j].isAlive;\r\n            const neighbors = countNeighbors(grid, i, j, rows, cols);            \r\n            \r\n            if(i===1 && j === 1){\r\n                console.log(neighbors);\r\n            }\r\n\r\n            if((state === false) && (neighbors === 3)){\r\n                next[i][j].isAlive = true;\r\n            } else if ((state === true) && ((neighbors === 2) || (neighbors ===3))){\r\n                next[i][j].isAlive = true;\r\n            } else {     \r\n                next[i][j].isAlive = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return next;\r\n}\r\n\r\nfunction countNeighbors(grid, x, y, rows, cols){\r\n    let sum = 0;\r\n    for (let i = -1; i <= 1; i++){\r\n        for (let j = -1; j<=1; j++){\r\n            //let notCurrent = !(i==0 && j==0);\r\n            let inBounds = ((x+i<rows-1) && (x+i>=0) && (y+j<cols-1) && (y+j>=0));          \r\n            \r\n            if(inBounds){\r\n                // if(grid[(x+i)][(y+j)].isAlive && notCurrent ){\r\n                    if(grid[x+i][y+j].isAlive){\r\n                        sum++;\r\n                    }\r\n                // }\r\n            }\r\n        }     \r\n    }\r\n\r\n    if(grid[(x)][(y)].isAlive){\r\n        sum--;\r\n    }\r\n    \r\n    return sum;\r\n}","import React, { Component } from \"react\";\r\n\r\nimport \"./Cell.css\";\r\n\r\nexport default class Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { col, row, isAlive, onMouseDown, onMouseEnter, onMouseUp } =\r\n      this.props;\r\n    let cellState = \"cell-dead\";\r\n\r\n    if (isAlive) {\r\n      cellState = \"cell-alive\";\r\n    }\r\n\r\n    return (\r\n      <div\r\n        // id={`cell-${row}-${col}`}\r\n        className={`cell ${cellState}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const DEFAULT_CELL = {\r\n  row: 0,\r\n  col: 0,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { gameOfLife } from \"./Automations/GameOfLife\";\r\nimport Cell from \"./Components/Cell/Cell\";\r\n\r\nimport \"./CellAutomata.css\";\r\n\r\nconst rows = 50;\r\nconst cols = 80;\r\n\r\nexport default class CellAutomata extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      started: false,\r\n      generations: 0,\r\n      automations: [\r\n        { id: '', name: 'Select Automation' },\r\n        { id: 'GOL', name: 'Game of Life' }\r\n\r\n      ],\r\n      automation: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = createGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  stepGOL = () => {\r\n    const newGrid = gameOfLife(this.state.grid, rows, cols);\r\n    this.setState({ grid: newGrid });\r\n    this.setState({ generations: this.state.generations + 1 });\r\n  };\r\n\r\n  runGameOfLife = () => {\r\n    clearInterval(this.intervalId);\r\n    this.intervalId = setInterval(this.stepGOL, 100); //takes a step every 100ms\r\n  };\r\n\r\n  handlemouseDown(row, col) {\r\n    getNewGrid(this.state.grid, row, col);\r\n    this.setState({ grid: this.state.grid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    getNewGrid(this.state.grid, row, col);\r\n    this.setState({ grid: this.state.grid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  start = () => {\r\n    var e = document.getElementById(\"automation\"); //gets automation from dropdown list\r\n    var a = e.value;\r\n    this.setState({ automation: a });\r\n    if (a === \"GOL\") {\r\n      this.runGameOfLife();\r\n    }\r\n  }\r\n\r\n  stop = () => {\r\n    clearInterval(this.intervalId);\r\n  };\r\n\r\n  clear = () => {\r\n    this.componentDidMount();\r\n    this.stop();\r\n    this.setState({ generations: 0 });\r\n  };\r\n\r\n  seed = () => {\r\n    const grid = seededGrid();\r\n    this.setState({ grid });\r\n    this.stop();\r\n    this.setState({ generations: 0 });\r\n  };\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed, started, automations } = this.state;\r\n\r\n    let automationList = automations.length > 0 && automations.map((item, i) => {\r\n      return (\r\n        <option key={i} value={item.id}>{item.name}</option>\r\n      )\r\n    }, this);\r\n\r\n    return (\r\n      <>\r\n        <br></br>\r\n        <select class=\"dropdown\" id=\"automation\">\r\n          {automationList}\r\n        </select>\r\n\r\n\r\n        <button class=\"button\" onClick={() => this.start()}>Start</button>\r\n        <button class=\"button\" onClick={() => this.stop()}>Stop</button>\r\n        <button class=\"button\" onClick={() => this.clear()}>Clear</button>\r\n        <button class=\"button\" onClick={() => this.seed()}>Random Seed</button>\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowInd) => {\r\n            return (\r\n              <div key={rowInd}>\r\n                {row.map((cell, cellInd) => {\r\n                  const { row, col, isAlive } = cell;\r\n                  return (\r\n                    <Cell\r\n                      key={cellInd}\r\n                      col={col}\r\n                      row={row}\r\n                      isAlive={isAlive}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      started={started}\r\n                      onMouseDown={(row, col) => this.handlemouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></Cell>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <br></br>\r\n        <div class=\"generations\"> Generations: {this.state.generations}</div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst createGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < rows; row++) {\r\n    const currRow = [];\r\n    for (let col = 0; col < cols; col++) {\r\n      currRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst seededGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < rows; row++) {\r\n    const currRow = [];\r\n    for (let col = 0; col < cols; col++) {\r\n      currRow.push(randomNode(col, row));\r\n    }\r\n    grid.push(currRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isAlive: false,\r\n  };\r\n};\r\n\r\nconst randomNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isAlive: Math.random() > 0.5,\r\n  };\r\n};\r\n\r\nconst getNewGrid = (grid, row, col) => {\r\n  const cell = grid[row][col];\r\n  const newCell = {\r\n    ...cell,\r\n    isAlive: !cell.isAlive,\r\n  };\r\n  grid[row][col] = newCell;\r\n};\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport CellAutomata from './CellAutomata/CellAutomata'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <CellAutomata></CellAutomata>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}