{"version":3,"sources":["logo.svg","CellAutomata/Automations/GameOfLife.js","CellAutomata/Components/Cell/Cell.jsx","CellAutomata/CellAutomata.jsx","CellAutomata/Automations/BriansBrain.js","CellAutomata/Automations/Seeds.js","App.js","reportWebVitals.js","index.js"],"names":["countNeighbors","grid","x","y","rows","cols","sum","i","j","isAlive","Cell","props","state","this","col","row","onMouseDown","onMouseEnter","onMouseUp","cellState","className","Component","CellAutomata","stepGOL","newGrid","next","_","cloneDeep","neighbors","console","log","gameOfLife","setState","generations","stepBB","briansBrain","stepSeeds","Seeds","runGameOfLife","clearInterval","intervalId","setInterval","runBriansBrain","runSeeds","start","automationType","document","getElementById","value","automation","stop","clear","componentDidMount","seed","seededGrid","mouseIsPressed","started","automations","id","name","createGrid","getNewGrid","automationList","length","map","item","class","onClick","rowInd","cell","cellInd","handlemouseDown","handleMouseEnter","handleMouseUp","currRow","push","createNode","randomNode","Math","round","random","newState","newCell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7111812e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import _ from \"lodash\"\r\n\r\nfunction gameOfLife(grid, rows, cols){\r\n    let next = _.cloneDeep(grid);\r\n    \r\n    for (let i = 0; i < rows; i++){\r\n        for (let j = 0; j < cols; j++){\r\n            \r\n            const state = grid[i][j].isAlive;\r\n            const neighbors = countNeighbors(grid, i, j, rows, cols);            \r\n            \r\n            if(i===1 && j === 1){\r\n                console.log(neighbors);\r\n            }\r\n\r\n            if((state === 0) && (neighbors === 3)){\r\n                next[i][j].isAlive = 1;\r\n            } else if ((state === 1) && ((neighbors === 2) || (neighbors ===3))){\r\n                next[i][j].isAlive = 1;\r\n            } else {     \r\n                next[i][j].isAlive = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    return next;\r\n}\r\n\r\nfunction countNeighbors(grid, x, y, rows, cols){\r\n    let sum = 0;\r\n    for (let i = -1; i <= 1; i++){\r\n        for (let j = -1; j<=1; j++){\r\n            //let notCurrent = !(i==0 && j==0);\r\n            let inBounds = ((x+i<rows-1) && (x+i>=0) && (y+j<cols-1) && (y+j>=0));          \r\n            \r\n            if(inBounds){\r\n                // if(grid[(x+i)][(y+j)].isAlive && notCurrent ){\r\n                    if(grid[x+i][y+j].isAlive==1){\r\n                        sum++;\r\n                    }\r\n                // }\r\n            }\r\n        }     \r\n    }\r\n\r\n    if(grid[(x)][(y)].isAlive==1){\r\n        sum--;\r\n    }\r\n    \r\n    return sum;\r\n}\r\n\r\nexport{gameOfLife,countNeighbors}","import React, { Component } from \"react\";\r\n\r\nimport \"./Cell.css\";\r\n\r\nexport default class Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { col, row, isAlive, onMouseDown, onMouseEnter, onMouseUp } =\r\n      this.props;\r\n    let cellState = \"cell-dead\";\r\n\r\n    if (isAlive==1) {\r\n      cellState = \"cell-alive\";\r\n    }\r\n    else if (isAlive==2){\r\n      cellState = \"cell-dying\";\r\n    }\r\n\r\n    return (\r\n      <div\r\n        // id={`cell-${row}-${col}`}\r\n        className={`cell ${cellState}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const DEFAULT_CELL = {\r\n  row: 0,\r\n  col: 0,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { gameOfLife } from \"./Automations/GameOfLife\";\r\nimport { briansBrain } from \"./Automations/BriansBrain\";\r\nimport { Seeds } from \"./Automations/Seeds\";\r\nimport Cell from \"./Components/Cell/Cell\";\r\n\r\nimport \"./CellAutomata.css\";\r\n\r\nconst rows = 50;\r\nconst cols = 80;\r\n\r\nexport default class CellAutomata extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      started: false,\r\n      generations: 0,\r\n      automations: [\r\n        // { id: '', name: 'Select Automation' },\r\n        { id: 'GOL', name: 'Game of Life' },\r\n        { id: 'BB', name: 'Brian\\'s Brain' },\r\n        { id: 'Seeds', name: 'Seeds' },\r\n      ],\r\n      automation: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = createGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  stepGOL = () => {\r\n    const newGrid = gameOfLife(this.state.grid, rows, cols);\r\n    this.setState({ grid: newGrid });\r\n    this.setState({ generations: this.state.generations + 1 });\r\n  };\r\n\r\n  stepBB = () => {\r\n    const newGrid = briansBrain(this.state.grid, rows, cols);\r\n    this.setState({ grid: newGrid });\r\n    this.setState({ generations: this.state.generations + 1 });\r\n  };\r\n\r\n  stepSeeds = () => {\r\n    const newGrid = Seeds(this.state.grid, rows, cols);\r\n    this.setState({ grid: newGrid });\r\n    this.setState({ generations: this.state.generations + 1 });\r\n  };\r\n\r\n  runGameOfLife = () => {\r\n    clearInterval(this.intervalId);\r\n    this.intervalId = setInterval(this.stepGOL, 100); //takes a step every 100ms\r\n  };\r\n\r\n  runBriansBrain = () => {\r\n    clearInterval(this.intervalId);\r\n    this.intervalId = setInterval(this.stepBB, 100); \r\n  };\r\n\r\n  runSeeds = () => {\r\n    clearInterval(this.intervalId);\r\n    this.intervalId = setInterval(this.stepSeeds, 100); \r\n  };\r\n\r\n  handlemouseDown(row, col) {\r\n    getNewGrid(this.state.grid, row, col);\r\n    this.setState({ grid: this.state.grid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    getNewGrid(this.state.grid, row, col);\r\n    this.setState({ grid: this.state.grid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  start = () => {\r\n    var automationType = document.getElementById(\"automation\").value; //gets automation from dropdown list\r\n    this.setState({ automation: automationType });\r\n    if (automationType === 'GOL') {\r\n      this.runGameOfLife();\r\n    }\r\n    else if (automationType === 'BB') {\r\n      this.runBriansBrain();\r\n    }\r\n    else if (automationType === 'Seeds') {\r\n      this.runSeeds();\r\n    }\r\n  }\r\n\r\n  stop = () => {\r\n    clearInterval(this.intervalId);\r\n  };\r\n\r\n  clear = () => {\r\n    this.componentDidMount();\r\n    this.stop();\r\n    this.setState({ generations: 0 });\r\n  };\r\n\r\n  seed = () => {\r\n    const grid = seededGrid();\r\n    this.setState({ grid });\r\n    this.stop();\r\n    this.setState({ generations: 0 });\r\n  };\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed, started, automations } = this.state;\r\n\r\n    let automationList = automations.length > 0 && automations.map((item, i) => {\r\n      return (\r\n        <option key={i} value={item.id}>{item.name}</option>\r\n      )\r\n    }, this);\r\n\r\n    return (\r\n      <>\r\n        <br></br>\r\n        <select class=\"dropdown\" id=\"automation\">\r\n          {automationList}\r\n        </select>\r\n\r\n\r\n        <button class=\"button\" onClick={() => this.start()}>Start</button>\r\n        <button class=\"button\" onClick={() => this.stop()}>Stop</button>\r\n        <button class=\"button\" onClick={() => this.clear()}>Clear</button>\r\n        <button class=\"button\" onClick={() => this.seed()}>Random Seed</button>\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowInd) => {\r\n            return (\r\n              <div key={rowInd}>\r\n                {row.map((cell, cellInd) => {\r\n                  const { row, col, isAlive } = cell;\r\n                  return (\r\n                    <Cell\r\n                      key={cellInd}\r\n                      col={col}\r\n                      row={row}\r\n                      isAlive={isAlive}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      started={started}\r\n                      onMouseDown={(row, col) => this.handlemouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></Cell>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <br></br>\r\n        <div class=\"generations\"> Generations: {this.state.generations}</div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst createGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < rows; row++) {\r\n    const currRow = [];\r\n    for (let col = 0; col < cols; col++) {\r\n      currRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst seededGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < rows; row++) {\r\n    const currRow = [];\r\n    for (let col = 0; col < cols; col++) {\r\n      currRow.push(randomNode(col, row));\r\n    }\r\n    grid.push(currRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isAlive: 0,\r\n  };\r\n};\r\n\r\nconst randomNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isAlive: Math.round(Math.random()),\r\n  };\r\n};\r\n\r\nconst getNewGrid = (grid, row, col) => {\r\n  const cell = grid[row][col];\r\n  let newState;\r\n  if(cell.isAlive == 1){\r\n    newState = 0;\r\n  }\r\n  else{\r\n    newState = 1;\r\n  }\r\n  const newCell = {\r\n    ...cell,\r\n    isAlive: newState,\r\n  };\r\n  grid[row][col] = newCell;\r\n};\r\n","import _ from \"lodash\"\r\nimport {countNeighbors} from \"./GameOfLife.js\"\r\n\r\nexport function briansBrain(grid, rows, cols){\r\n    let next = _.cloneDeep(grid);\r\n    \r\n    for (let i = 0; i < rows; i++){\r\n        for (let j = 0; j < cols; j++){\r\n            \r\n            const state = grid[i][j].isAlive;\r\n            const neighbors = countNeighbors(grid, i, j, rows, cols);            \r\n            \r\n\r\n            if(state==1){\r\n                next[i][j].isAlive = 2;\r\n            }\r\n            else if (state==2){\r\n                next[i][j].isAlive = 0;\r\n            }\r\n            else if (state==0 && neighbors==2){\r\n                next[i][j].isAlive = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    return next;\r\n}","import {countNeighbors} from \"./GameOfLife.js\"\r\nimport _ from \"lodash\"\r\n\r\nexport function Seeds(grid, rows, cols){\r\n    let next = _.cloneDeep(grid);\r\n    \r\n    for (let i = 0; i < rows; i++){\r\n        for (let j = 0; j < cols; j++){\r\n            \r\n            const state = grid[i][j].isAlive;\r\n            const neighbors = countNeighbors(grid, i, j, rows, cols);            \r\n            \r\n\r\n            if(state==0 && neighbors==2){\r\n                next[i][j].isAlive = 1;\r\n            }\r\n            else{\r\n                next[i][j].isAlive = 0;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return next;\r\n}","import logo from './logo.svg';\r\nimport './App.css';\r\nimport CellAutomata from './CellAutomata/CellAutomata'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <CellAutomata></CellAutomata>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}