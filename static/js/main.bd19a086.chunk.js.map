{"version":3,"sources":["logo.svg","CellAutomata/Automations/GameOfLife.js","CellAutomata/Components/Cell/Cell.jsx","CellAutomata/CellAutomata.jsx","App.js","reportWebVitals.js","index.js"],"names":["countNeighbors","grid","x","y","rows","cols","sum","i","j","isAlive","Cell","props","state","this","col","row","onMouseDown","onMouseEnter","onMouseUp","cellState","className","Component","generations","CellAutomata","stepGOL","newGrid","next","_","cloneDeep","neighbors","console","log","gameOfLife","setState","runGameOfLife","clearInterval","intervalId","setInterval","stop","clear","componentDidMount","seed","seededGrid","mouseIsPressed","started","createGrid","getNewGrid","name","id","value","onClick","map","rowInd","cell","cellInd","handlemouseDown","handleMouseEnter","handleMouseUp","currRow","push","createNode","randomNode","Math","random","newCell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd19a086.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import _ from \"lodash\"\n\nexport function gameOfLife(grid, rows, cols){\n    let next = _.cloneDeep(grid);\n    \n    for (let i = 0; i < rows; i++){\n        for (let j = 0; j < cols; j++){\n            \n            const state = grid[i][j].isAlive;\n            const neighbors = countNeighbors(grid, i, j, rows, cols);            \n            \n            if(i===1 && j === 1){\n                console.log(neighbors);\n            }\n\n            if((state === false) && (neighbors === 3)){\n                next[i][j].isAlive = true;\n            } else if ((state === true) && ((neighbors === 2) || (neighbors ===3))){\n                next[i][j].isAlive = true;\n            } else {     \n                next[i][j].isAlive = false;\n            }\n        }\n    }\n\n    return next;\n}\n\nfunction countNeighbors(grid, x, y, rows, cols){\n    let sum = 0;\n    for (let i = -1; i <= 1; i++){\n        for (let j = -1; j<=1; j++){\n            //let notCurrent = !(i==0 && j==0);\n            let inBounds = ((x+i<rows-1) && (x+i>=0) && (y+j<cols-1) && (y+j>=0));          \n            \n            if(inBounds){\n                // if(grid[(x+i)][(y+j)].isAlive && notCurrent ){\n                    if(grid[x+i][y+j].isAlive){\n                        sum++;\n                    }\n                // }\n            }\n        }     \n    }\n\n    if(grid[(x)][(y)].isAlive){\n        sum--;\n    }\n    \n    return sum;\n}","import React, { Component } from \"react\";\n\nimport \"./Cell.css\";\n\nexport default class Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { col, row, isAlive, onMouseDown, onMouseEnter, onMouseUp } =\n      this.props;\n    let cellState = \"cell-dead\";\n\n    if (isAlive) {\n      cellState = \"cell-alive\";\n    }\n\n    return (\n      <div\n        // id={`cell-${row}-${col}`}\n        className={`cell ${cellState}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n\nexport const DEFAULT_CELL = {\n  row: 0,\n  col: 0,\n};\n","import React, { Component } from \"react\";\nimport { gameOfLife } from \"./Automations/GameOfLife\";\nimport Cell from \"./Components/Cell/Cell\";\n\nimport \"./CellAutomata.css\";\n\nconst rows = 50;\nconst cols = 80;\nvar generations = 0;\nexport default class CellAutomata extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      started: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({ grid });\n  }\n\n  stepGOL = () => {\n    const newGrid = gameOfLife(this.state.grid, rows, cols);\n    this.setState({ grid: newGrid });\n    generations++;\n  };\n\n  runGameOfLife = () => {\n    clearInterval(this.intervalId);\n    this.intervalId = setInterval(this.stepGOL, 50);\n  };\n\n  handlemouseDown(row, col) {\n    getNewGrid(this.state.grid, row, col);\n    this.setState({ grid: this.state.grid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    // const newGrid = getNewGrid(this.state.grid, row, col);\n    // this.setState({ grid: newGrid });\n    getNewGrid(this.state.grid, row, col);\n    this.setState({ grid: this.state.grid, mouseIsPressed: true });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  stop = () => {\n    clearInterval(this.intervalId);\n  };\n\n  clear = () => {\n    this.componentDidMount();\n    this.stop();\n  };\n\n  seed = () => {\n    const grid = seededGrid();\n    this.setState({ grid });\n  };\n\n  render() {\n    const { grid, mouseIsPressed, started } = this.state;\n\n    return (\n      <>\n        <br></br>\n        <select name=\"Automation\" id=\"automations\">\n          <option value=\"GOL\">Game Of Life</option>\n        </select>\n\n        <button onClick={() => this.runGameOfLife()}>Start</button>\n        <button onClick={() => this.stop()}>Stop</button>\n        <button onClick={() => this.clear()}>Clear</button>\n        <button onClick={() => this.seed()}>Random Seed</button>\n\n        <div className=\"grid\">\n          {grid.map((row, rowInd) => {\n            return (\n              <div key={rowInd}>\n                {row.map((cell, cellInd) => {\n                  const { row, col, isAlive } = cell;\n                  return (\n                    <Cell\n                      key={cellInd}\n                      col={col}\n                      row={row}\n                      isAlive={isAlive}\n                      mouseIsPressed={mouseIsPressed}\n                      started={started}\n                      onMouseDown={(row, col) => this.handlemouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Cell>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <h1 id=\"generations\">Generations: {generations}</h1>\n      </>\n    );\n  }\n}\n\nconst createGrid = () => {\n  const grid = [];\n  for (let row = 0; row < rows; row++) {\n    const currRow = [];\n    for (let col = 0; col < cols; col++) {\n      currRow.push(createNode(col, row));\n    }\n    grid.push(currRow);\n  }\n  return grid;\n};\n\nconst seededGrid = () => {\n  const grid = [];\n  for (let row = 0; row < rows; row++) {\n    const currRow = [];\n    for (let col = 0; col < cols; col++) {\n      currRow.push(randomNode(col, row));\n    }\n    grid.push(currRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isAlive: false,\n  };\n};\n\nconst randomNode = (col, row) => {\n  return {\n    col,\n    row,\n    isAlive: Math.random() > 0.5,\n  };\n};\n\nconst getNewGrid = (grid, row, col) => {\n  const cell = grid[row][col];\n  const newCell = {\n    ...cell,\n    isAlive: !cell.isAlive,\n  };\n  grid[row][col] = newCell;\n};\n","import logo from './logo.svg';\nimport './App.css';\nimport CellAutomata from './CellAutomata/CellAutomata'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <CellAutomata></CellAutomata>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}